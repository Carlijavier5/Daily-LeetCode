The string "PAYPALISHIRING" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)

> P   A   H   N
> A P L S I I G
> Y   I   R

And then read line by line: "PAHNAPLSIIGYIR"

Write the code that will take a string and make this conversion given a number of rows:

> string convert(string s, int numRows);

Example 1:

> Input: s = "PAYPALISHIRING", numRows = 3
> Output: "PAHNAPLSIIGYIR"

Example 2:

> Input: s = "PAYPALISHIRING", numRows = 4
> Output: "PINALSIGYAHRPI"
> Explanation:
> P     I    N
> A   L S  I G
> Y A   H R
> P     I

Example 3:

> Input: s = "A", numRows = 1
> Output: "A"

Constraints:

> 1 <= s.length <= 1000
> s consists of English letters (lower-case and upper-case), ',' and '.'.
> 1 <= numRows <= 1000

My Solution:

class Solution:
    def convert(self, s: str, numRows: int) -> str:
        matrix = {};
        pointer = 0;
        state = "Descending";
        for i in range(numRows):
            matrix[i] = [];
        if numRows > 1:
            for i in s:
                matrix[pointer].append(i);
                if state == "Descending" and pointer != numRows-1:
                    pointer += 1;
                elif state == "Descending" and pointer == numRows-1:
                    state = "Ascending";
                    pointer -= 1;
                elif state == "Ascending" and pointer != 0:
                    pointer -= 1;
                elif state == "Ascending" and pointer == 0:
                    state = "Descending";
                    pointer += 1;
            print(matrix);
            lstr = [];
            for i in range(numRows):
                lstr.append("".join(matrix[i]));
            return "".join(lstr);
        else:
            return s;
