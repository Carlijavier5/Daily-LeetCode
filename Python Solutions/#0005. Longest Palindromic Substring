#0005. Longest Palindromic Substring

class Solution:
    def longestPalindrome(self, s: str) -> str:
        np = [s[0]];
        if len(s) > 1:
            if len(s) > 2:
                for i in range(len(s)):
                    x = i;
                    y = i+1;
                    while x > 0 and y < len(s) and s[x] == s[y-1]:
                        x -= 1;
                        y += 1;
                    if s[x] != s[y-1]:
                        np.append(s[x+1:y-1]);
                    else:
                        np.append(s[x:y]);
                        
            for i in range(len(s)-1):
                x = i;
                y = i+2;
                while x >= 0 and y <= len(s)-1 and s[x] == s[y-1]:
                    x -= 1;
                    y += 1;
                if s[x] != s[y-1]:
                    np.append(s[x+1:y-1]);
                else:
                    np.append(s[x:y]);
        if len(s) in [3,4]:
                for i in range(len(s)):
                        for x in range(i+1,len(s)):
                                if s[i:x+1] == s[i:x+1][::-1]:
                                        np.append(s[i:x+1]);
        return max(np, key=len);
